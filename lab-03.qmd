---
title: "lab 3: COVID-19"
subtitle: 'Ecosystem Science and Sustainability 330'
author:
  - name: Megan Hoover
    email: megan.hoover21@gmail.com
format: html
execute: 
  echo: true
output:
  html
    self contained:true
knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
---

## Q2: Lets pretend it in January 1st, 2022. You are a data scientist for the state of Colorado Department of Public Health.

You’ve been tasked with giving a report to Governor Polis each morning about the most current COVID-19 conditions at the county level.

As it stands, the Colorado Department of Public Health maintains a watch list of counties that are being monitored for worsening corona virus trends. There are six criteria used to place counties on the watch list:

1.Doing fewer than 150 tests per 100,000 residents daily (over a 7-day average)
2.More than 100 new cases per 100,000 residents over the past 14 days…
3.25 new cases per 100,000 residents and an 8% test positivity rate
4.10% or greater increase in COVID-19 hospitalized patients over the past 3 days
5.Fewer than 20% of ICU beds available
6.Fewer than 25% ventilators available 
Of these 6 conditions, you are in charge of monitoring condition number 2.

To do this job well, you should set up a reproducible framework to communicate the following in a way that can be updated every time new data is released (daily):

1. cumulative cases in the 5 worst counties
2. total NEW cases in the 5 worst counties
3. A list of safe counties
4. A text report describing the total new cases, total cumulative cases, and number of safe counties.
You should build this analysis in such a way that running it will extract the most current data straight from the NY-Times URL and the state name and date are parameters that can be changed allowing this report to be run for other states/dates.

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r} 
#Download libraries,read in COVID-19 Data, and prepare data table for calculations
library(tidyverse) #data wrangling and visualization) 

library(flextable) #make nice tables)

library(zoo) #(rolling averages

url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
covid_raw<-read_csv(url)

#create my.date and my.state object. Set my date to "2022-02-01" and my state to "colorado"
my.date <- "2022-02-01" 
  class(my.date)
date<-my.date %>%
  as.Date()
class(date)
my.state <- "Colorado"

#Start by making a subset that limits (filter) the data to Colorado and add a new column (mutate) with the daily new cases using diff/lag by county (group_by). Do the same for new deaths as well.

#(Hint: you will need some combination of filter, group_by, arrange, mutate, diff/lag, and ungroup)

covid1 = covid_raw %>%
  filter(state == my.state) %>%
  arrange(county, date) %>%
  group_by(county) %>%
  mutate(
    new_cases = cases - lag(cases, order_by = date),
    new_deaths = deaths - lag(deaths, order_by = date)
  ) %>%
  ungroup()

head(covid1)
```

# filter the data to include only records for the date my.date, which is 2022-02-01.
```{r}
top_cum_cases <- covid1 %>%
  filter(date== my.date) %>%
  arrange(desc(cases)) %>%
  select(county, cases) %>%
  head(5)

top_new_cases <- covid1 %>%
  filter(date== my.date) %>%
  arrange(desc(new_cases)) %>%
  select(county, new_cases) %>%
  head(5)
```

# Using your subset, generate (2) tables. The first should show the 5 counties with the most CUMULATIVE cases, and the second should show the 5 counties with the most NEW cases. Remember to use your my.date object as a proxy for today’s date:
```{r}
flex_top_cumcases = flextable(top_cum_cases)
  flex_top_cumcases %>%
  set_caption("Top 5 Counties with the Most Cumulative Cases as of 2022-02-01")
  
print(flex_top_cumcases)

flex_new_cases = flextable(top_new_cases)
flex_new_cases %>% 
  set_caption("Top 5 Counties with the Most New Cases as of 2022-02-01")

print(flex_new_cases)

```

# Population data is offered by the Census. Please read in this data.
```{r}
pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'

pop_covid_raw <-read_csv(pop_url)
```

# You notice that the COVID data provides a 5 digit character FIP code representing the state in the first 2 digits and the county in the last 3. In the population data, the STATE and COUNTY FIP identifiers are read in as numerics. To make these compatible we need to:

1.Convert the STATE numeric into a character forced to 2 digits with a leading 0 (when needed)
2.Convert the COUNTY numeric into a character forced to 3 digits with leading 0’s (when needed)
3.Create a FIP variable the STATE numeric into a character forced to 2 digits with a leading 0 (when needed)
```{r}

```

